package bruhcollective.itaysonlab.microapp.gamepage.ui

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CornerSize
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.ArrowBack
import androidx.compose.material3.*
import androidx.compose.material3.TopAppBarDefaults.topAppBarColors
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.nestedscroll.nestedScroll
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import bruhcollective.itaysonlab.jetisteam.models.SteamID
import bruhcollective.itaysonlab.jetisteam.uikit.page.PageLayout
import bruhcollective.itaysonlab.microapp.gamepage.R
import bruhcollective.itaysonlab.microapp.gamepage.ui.components.*
import bruhcollective.itaysonlab.microapp.gamepage.ui.components.review.ReviewCard

@OptIn(ExperimentalMaterial3Api::class)
@Composable
internal fun GamePageScreen(
    onBackClick: () -> Unit,
    viewModel: GamePageViewModel = hiltViewModel(),
    onDeckReportClicked: (Int) -> Unit
) {
    val topAppBarState = rememberTopAppBarState()
    val scrollBehavior = TopAppBarDefaults.pinnedScrollBehavior(state = topAppBarState)

    PageLayout(state = viewModel.state, onReload = viewModel::reload) { data ->
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            data.fullDetails.name,
                            modifier = Modifier.alpha(alpha = topAppBarState.overlappedFraction)
                        )
                    },
                    scrollBehavior = scrollBehavior,
                    colors = topAppBarColors(
                        containerColor = Color.Transparent,
                        scrolledContainerColor = MaterialTheme.colorScheme.surfaceColorAtElevation(3.dp)
                    ),
                    navigationIcon = {
                        IconButton(onClick = onBackClick) {
                            Icon(imageVector = Icons.Rounded.ArrowBack, contentDescription = null)
                        }
                    }
                )
            }, modifier = Modifier
                .nestedScroll(scrollBehavior.nestedScrollConnection)
                .fillMaxSize()
        ) { innerPadding ->
            LazyColumn {
                item {
                    GamePageHeader(
                        background = data.headerBackgroundUrl,
                        backgroundBlurred = data.headerBackgroundAutogenerated,
                        logoUrl = data.logoUrl,
                        useTextLogo = data.logoUrlAbsent,
                        name = data.fullDetails.name
                    )
                }

                item {
                    GamePageInfo(
                        publishers = data.fullDetails.publishers,
                        developers = data.fullDetails.developers,
                        releaseDate = data.fullDetails.releaseDate
                    )
                }

                item {
                    Text(
                        text = data.fullDetails.shortDescription,
                        modifier = Modifier.padding(16.dp)
                    )
                }

                item {
                    GamePageTagList(
                        tags = data.tags,
                        genres = data.fullDetails.genres
                    )
                }

                item {
                    GamePageMediaContainer(
                        urls = remember(data.fullDetails) {
                            data.fullDetails.screenshots.map { it.thumbnail }
                        }
                    )
                }

                item {
                    Spacer(Modifier.height(16.dp))

                    GamePageCritics(
                        metaCritic = data.fullDetails.metacritic,
                        deckReport = data.deckSupportReport,
                        onDeckClicked = { onDeckReportClicked(viewModel.appId) }
                    )

                    Spacer(Modifier.height(16.dp))
                }

                item(key = "gameDesc", contentType = { "GPD" }) {
                    GamePageDescription(
                        html = data.fullDescription,
                        modifier = Modifier
                            .clip(MaterialTheme.shapes.large)
                            .fillMaxWidth()
                            .background(MaterialTheme.colorScheme.surfaceColorAtElevation(4.dp))
                            .padding(16.dp)
                    )
                }

                item {
                    Spacer(Modifier.height(16.dp))

                    Column(
                        Modifier
                            .clip(
                                MaterialTheme.shapes.large.copy(
                                    bottomStart = CornerSize(0.dp),
                                    bottomEnd = CornerSize(0.dp)
                                )
                            )
                            .fillMaxWidth()
                            .background(MaterialTheme.colorScheme.surfaceColorAtElevation(4.dp))
                            .padding(horizontal = 16.dp)
                            .padding(top = 16.dp, bottom = 8.dp)
                    ) {
                        Text(
                            text = stringResource(id = R.string.gamepage_reviews),
                            color = MaterialTheme.colorScheme.onSurface,
                            fontSize = 18.sp
                        )

                        Text(
                            text = stringResource(
                                id = R.string.gamepage_reviews_desc,
                                data.reviews.summary?.reviewScoreDesc ?: "",
                                data.reviews.summary?.positiveReviews ?: 0,
                                data.reviews.summary?.negativeReviews ?: 0
                            ),
                            color = MaterialTheme.colorScheme.onSurfaceVariant,
                            fontSize = 13.sp
                        )
                    }
                }

                items(data.reviews.reviews, key = {
                    "gameReview-${it.id}"
                }, contentType = {
                    "GRC"
                }) { review ->
                    ReviewCard(
                        review = review,
                        reviewer = remember(review.author.steamId) { data.reviewers[SteamID(review.author.steamid)]!! },
                        modifier = Modifier
                            .background(MaterialTheme.colorScheme.surfaceColorAtElevation(4.dp))
                            .padding(horizontal = 16.dp, vertical = 8.dp)
                    )
                }
            }
        }
    }
}