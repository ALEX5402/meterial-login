import "common.proto";
import "common_base.proto";

option optimize_for = SPEED;
option java_package = "steam.auth";
option java_generic_services = true;
option java_multiple_files = true;

enum EAuthTokenPlatformType {
	k_EAuthTokenPlatformType_Unknown = 0;
	k_EAuthTokenPlatformType_SteamClient = 1;
	k_EAuthTokenPlatformType_WebBrowser = 2;
	k_EAuthTokenPlatformType_MobileApp = 3;
}

enum EAuthSessionGuardType {
	k_EAuthSessionGuardType_Unknown = 0;
	k_EAuthSessionGuardType_None = 1;
	k_EAuthSessionGuardType_EmailCode = 2;
	k_EAuthSessionGuardType_DeviceCode = 3;
	k_EAuthSessionGuardType_DeviceConfirmation = 4;
	k_EAuthSessionGuardType_EmailConfirmation = 5;
	k_EAuthSessionGuardType_MachineToken = 6;
}

enum EAuthSessionSecurityHistory {
	k_EAuthSessionSecurityHistory_Invalid = 0;
	k_EAuthSessionSecurityHistory_UsedPreviously = 1;
	k_EAuthSessionSecurityHistory_NoPriorHistory = 2;
}

enum EAuthTokenState {
	k_EAuthTokenState_Invalid = 0;
	k_EAuthTokenState_New = 1;
	k_EAuthTokenState_Confirmed = 2;
	k_EAuthTokenState_Issued = 3;
	k_EAuthTokenState_Denied = 4;
	k_EAuthTokenState_LoggedOut = 5;
	k_EAuthTokenState_Revoked = 99;
}

enum ESessionPersistence {
	k_ESessionPersistence_Invalid = -1;
	k_ESessionPersistence_Ephemeral = 0;
	k_ESessionPersistence_Persistent = 1;
}

enum EAuthTokenRevokeAction {
	k_EAuthTokenRevokeLogout = 0;
	k_EAuthTokenRevokePermanent = 1;
	k_EAuthTokenRevokeReplaced = 2;
	k_EAuthTokenRevokeSupport = 3;
}

enum EGamingDeviceType {
	k_EGamingDeviceType_Unknown = 0;
	k_EGamingDeviceType_StandardPC = 1;
	k_EGamingDeviceType_Console = 256;
	k_EGamingDeviceType_PS3 = 272;
	k_EGamingDeviceType_Steambox = 288;
	k_EGamingDeviceType_Handheld = 512;
	k_EGamingDeviceType_Phone = 528;
	k_EGamingDeviceType_SteamDeck = 544;
}

enum EOSType {
	k_eOSXboxOne = -800;
	k_eOSWebClient = -700;
	k_eOSEmbeddedClient = -675;
	k_eTVOSUnknown = -650;
	k_eTVOS9 = -649;
	k_eTVOS9_1 = -648;
	k_eTVOS9_2 = -647;
	k_eTVOS9_3 = -646;
	k_eTVOS10 = -645;
	k_eTVOS10_1 = -644;
	k_eTVOS10_2 = -643;
	k_eTVOS11 = -642;
	k_eTVOS11_1 = -641;
	k_eTVOS11_2 = -640;
	k_eTVOS11_3 = -639;
	k_eTVOS11_4 = -638;
	k_eTVOS12 = -637;
	k_eTVOS12_1 = -636;
	k_eIOSUnknown = -600;
	k_eIOS1 = -599;
	k_eIOS2 = -598;
	k_eIOS3 = -597;
	k_eIOS4 = -596;
	k_eIOS5 = -595;
	k_eIOS6 = -594;
	k_eIOS6_1 = -593;
	k_eIOS7 = -592;
	k_eIOS7_1 = -591;
	k_eIOS8 = -590;
	k_eIOS8_1 = -589;
	k_eIOS8_2 = -588;
	k_eIOS8_3 = -587;
	k_eIOS8_4 = -586;
	k_eIOS9 = -585;
	k_eIOS9_1 = -584;
	k_eIOS9_2 = -583;
	k_eIOS9_3 = -582;
	k_eIOS10 = -581;
	k_eIOS10_1 = -580;
	k_eIOS10_2 = -579;
	k_eIOS10_3 = -578;
	k_eIOS11 = -577;
	k_eIOS11_1 = -576;
	k_eIOS11_2 = -575;
	k_eIOS11_3 = -574;
	k_eIOS11_4 = -573;
	k_eIOS12 = -572;
	k_eIOS12_1 = -571;
	k_eIOSMax = -570;
	k_eAndroidUnknown = -500;
	k_eAndroid6 = -499;
	k_eAndroid7 = -498;
	k_eAndroid8 = -497;
	k_eAndroid9 = -496;
	k_eAndroidMax = -495;
	k_eOSTypeMax = 32;
}

enum EPlatformType {
	k_EPlatformTypeUnknown = 0;
	k_EPlatformTypeWin32 = 1;
	k_EPlatformTypeWin64 = 2;
	k_EPlatformTypeLinux64 = 3;
	k_EPlatformTypeOSX = 4;
	k_EPlatformTypePS3 = 5;
	k_EPlatformTypeLinux32 = 6;
	k_EPlatformTypeAndroid32 = 7;
	k_EPlatformTypeAndroid64 = 8;
	k_EPlatformTypeIOS32 = 9;
	k_EPlatformTypeIOS64 = 10;
	k_EPlatformTypeTVOS = 11;
	k_EPlatformTypeEmbeddedClient = 12;
	k_EPlatformTypeBrowser = 13;
	k_EPlatformTypeMax = 14;
}

message CAuthentication_AccessToken_GenerateForApp_Request {
	optional string refresh_token = 1;
	optional fixed64 steamid = 2;
}

message CAuthentication_AccessToken_GenerateForApp_Response {
	optional string access_token = 1;
}

message CAuthentication_AllowedConfirmation {
	optional .EAuthSessionGuardType confirmation_type = 1 [default = k_EAuthSessionGuardType_Unknown, (description) = "authentication can proceed with this confirmation type"];
	optional string associated_message = 2;
}

message CAuthentication_BeginAuthSessionViaCredentials_Request {
	optional string device_friendly_name = 1;
	optional string account_name = 2;
	optional string encrypted_password = 3;
	optional uint64 encryption_timestamp = 4;
	optional bool remember_login = 5;
	optional .EAuthTokenPlatformType platform_type = 6 [default = k_EAuthTokenPlatformType_Unknown];
	optional .ESessionPersistence persistence = 7 [default = k_ESessionPersistence_Persistent, (description) = "whether we are requesting a persistent or an ephemeral session"];
	optional string website_id = 8 [default = "Unknown", (description) = "(EMachineAuthWebDomain) identifier of client requesting auth"];
	optional .CAuthentication_DeviceDetails device_details = 9 [(description) = "User-supplied details about the device attempting to sign in"];
	optional string guard_data = 10 [(description) = "steam guard data for client login"];
}

message CAuthentication_BeginAuthSessionViaCredentials_Response {
	optional uint64 client_id = 1;
	optional bytes request_id = 2;
	optional float interval = 3;
	repeated .CAuthentication_AllowedConfirmation allowed_confirmations = 4;
	optional uint64 steamid = 5;
	optional string weak_token = 6;
}

message CAuthentication_BeginAuthSessionViaQR_Request {
	optional string device_friendly_name = 1;
	optional .EAuthTokenPlatformType platform_type = 2 [default = k_EAuthTokenPlatformType_Unknown];
	optional .CAuthentication_DeviceDetails device_details = 3;
	optional string website_id = 4 [default = "Unknown"];
}

message CAuthentication_DeviceDetails {
	optional string device_friendly_name = 1 [(description) = "User-supplied, or client-supplied, friendly name of device"];
	optional .EAuthTokenPlatformType platform_type = 2 [default = k_EAuthTokenPlatformType_Unknown, (description) = "EAuthTokenPlatformType, claimed, of device"];
	optional .EOSType os_type = 3 [(description) = "EOSType, claimed, of authorized device"];
	optional .EGamingDeviceType gaming_device_type = 4 [(description) = "EGamingDeviceType, claimed, of authorized device for steam client-type devices"];
}

message CAuthentication_BeginAuthSessionViaQR_Response {
	optional uint64 client_id = 1;
	optional string challenge_url = 2;
	optional bytes request_id = 3;
	optional float interval = 4;
	repeated .CAuthentication_AllowedConfirmation allowed_confirmations = 5;
	optional int32 version = 6;
}

message CAuthentication_GetAuthSessionInfo_Request {
	optional uint64 client_id = 1;
}

message CAuthentication_GetAuthSessionInfo_Response {
	optional string ip = 1;
	optional string geoloc = 2;
	optional string city = 3;
	optional string state = 4;
	optional string country = 5;
	optional .EAuthTokenPlatformType platform_type = 6 [default = k_EAuthTokenPlatformType_Unknown, (description) = "platform type of requestor"];
	optional string device_friendly_name = 7;
	optional int32 version = 8;
	optional .EAuthSessionSecurityHistory login_history = 9 [default = k_EAuthSessionSecurityHistory_Invalid, (description) = "whether the ip has previuously been used on the account successfully"];
	optional bool requestor_location_mismatch = 10;
	optional bool high_usage_login = 11;
	optional .ESessionPersistence requested_persistence = 12 [default = k_ESessionPersistence_Invalid, (description) = "session persistence requestor has indicated they want"];
}

message CAuthentication_GetAuthSessionsForAccount_Request {
}

message CAuthentication_GetAuthSessionsForAccount_Response {
	repeated uint64 client_ids = 1;
}

message CAuthentication_GetPasswordRSAPublicKey_Request {
	optional string account_name = 1;
}

message CAuthentication_GetPasswordRSAPublicKey_Response {
	optional string publickey_mod = 1;
	optional string publickey_exp = 2;
	optional uint64 timestamp = 3;
}

message CAuthentication_MigrateMobileSession_Request {
	optional fixed64 steamid = 1;
	optional string token = 2;
	optional string signature = 3;
}

message CAuthentication_MigrateMobileSession_Response {
	optional string refresh_token = 1;
	optional string access_token = 2;
}

message CAuthentication_PollAuthSessionStatus_Request {
	optional uint64 client_id = 1;
	optional bytes request_id = 2;
	optional fixed64 token_to_revoke = 3;
}

message CAuthentication_PollAuthSessionStatus_Response {
	optional uint64 new_client_id = 1;
	optional string new_challenge_url = 2;
	optional string refresh_token = 3;
	optional string access_token = 4;
	optional bool had_remote_interaction = 5;
	optional string account_name = 6;
	optional string new_guard_data = 7;
}

message CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
	optional int32 version = 1;
	optional uint64 client_id = 2;
	optional fixed64 steamid = 3;
	optional bytes signature = 4;
	optional bool confirm = 5 [default = false];
	optional .ESessionPersistence persistence = 6 [default = k_ESessionPersistence_Persistent, (description) = "whether we are requesting a persistent or an ephemeral session"];
}

message CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
}

message CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
	optional uint64 client_id = 1;
	optional fixed64 steamid = 2;
	optional string code = 3;
	optional .EAuthSessionGuardType code_type = 4 [default = k_EAuthSessionGuardType_Unknown, (description) = "type of confirmation code"];
}

message CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
}

message CAuthentication_RefreshToken_Enumerate_Request {
}

message CAuthentication_RefreshToken_Enumerate_Response {
	message TokenUsageEvent {
		optional uint32 time = 1 [(description) = "Approximate time of history event (may be deliberately fuzzed or omitted)"];
		optional .CMsgIPAddress ip = 2 [(description) = "IP at which event was observed"];
		optional string locale = 3 [(description) = "city/location name, if known"];
		optional string country = 4;
		optional string state = 5;
		optional string city = 6;
	}

	message RefreshTokenDescription {
		optional fixed64 token_id = 1 [(description) = "Persistent token/device identifier"];
		optional string token_description = 2 [(description) = "client-supplied friendly name for the device"];
		optional uint32 time_updated = 3;
		optional .EAuthTokenPlatformType platform_type = 4 [default = k_EAuthTokenPlatformType_Unknown, (description) = "gross platform type (mobile/client/browser)"];
		optional bool logged_in = 5 [(description) = "If true, this token is currently valid. False indicates it is a machine token - ok for steamguard if you know the credential"];
		optional .EPlatformType os_platform = 6 [(description) = "EPlatformType - rough classification of device OS, if known"];
		optional .EAuthSessionGuardType auth_type = 7 [(description) = "EAuthTokenGuardType - device authorization mechanism, if known"];
		optional .EGamingDeviceType gaming_device_type = 8 [(description) = "EGamingDeviceType - classify console/PC/SteamDeck, if known; applies only for Steam Client devices"];
		optional .CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent first_seen = 9 [(description) = "Information about original authorization event"];
		optional .CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent last_seen = 10 [(description) = "Information about most-recently seen, if known for this device"];
	}

	repeated .CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription refresh_tokens = 1;
	optional fixed64 requesting_token = 2;
}

message CAuthentication_RefreshToken_Revoke_Request {
	optional fixed64 token_id = 1;
	optional fixed64 steamid = 2 [(description) = "Token holder if an admin action on behalf of another user"];
	optional .EAuthTokenRevokeAction revoke_action = 3 [default = k_EAuthTokenRevokePermanent, (description) = "Select between logout and logout-and-forget-machine"];
	optional bytes signature = 4 [(description) = "required signature over token_id"];
}

message CAuthentication_RefreshToken_Revoke_Response {
}

service Authentication {
	rpc BeginAuthSessionViaCredentials (.CAuthentication_BeginAuthSessionViaCredentials_Request) returns (.CAuthentication_BeginAuthSessionViaCredentials_Response);
	rpc BeginAuthSessionViaQR (.CAuthentication_BeginAuthSessionViaQR_Request) returns (.CAuthentication_BeginAuthSessionViaQR_Response);
	rpc EnumerateTokens (.CAuthentication_RefreshToken_Enumerate_Request) returns (.CAuthentication_RefreshToken_Enumerate_Response);
	rpc GenerateAccessTokenForApp (.CAuthentication_AccessToken_GenerateForApp_Request) returns (.CAuthentication_AccessToken_GenerateForApp_Response);
	rpc GetAuthSessionInfo (.CAuthentication_GetAuthSessionInfo_Request) returns (.CAuthentication_GetAuthSessionInfo_Response);
	rpc GetAuthSessionsForAccount (.CAuthentication_GetAuthSessionsForAccount_Request) returns (.CAuthentication_GetAuthSessionsForAccount_Response);
	rpc GetPasswordRSAPublicKey (.CAuthentication_GetPasswordRSAPublicKey_Request) returns (.CAuthentication_GetPasswordRSAPublicKey_Response);
	rpc MigrateMobileSession (.CAuthentication_MigrateMobileSession_Request) returns (.CAuthentication_MigrateMobileSession_Response);
	rpc PollAuthSessionStatus (.CAuthentication_PollAuthSessionStatus_Request) returns (.CAuthentication_PollAuthSessionStatus_Response);
	rpc RevokeRefreshToken (.CAuthentication_RefreshToken_Revoke_Request) returns (.CAuthentication_RefreshToken_Revoke_Response);
	rpc UpdateAuthSessionWithMobileConfirmation (.CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request) returns (.CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response);
	rpc UpdateAuthSessionWithSteamGuardCode (.CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request) returns (.CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response);
}

